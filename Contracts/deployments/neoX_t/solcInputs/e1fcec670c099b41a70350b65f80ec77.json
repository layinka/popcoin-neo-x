{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/Oracles/ISupraSValueFeed.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\r\npragma solidity ^0.8.26;\r\n\r\ninterface ISupraSValueFeed {\r\n\r\n    // Data structure to hold the pair data\r\n    struct priceFeed {\r\n        uint256 round;\r\n        uint256 decimals;\r\n        uint256 time;\r\n        uint256 price;\r\n        }\r\n\r\n\r\n    // Data structure to hold the derived/connverted data pairs.  This depends on your requirements.\r\n\r\n    struct derivedData{\r\n        int256 roundDifference;\r\n        uint256 derivedPrice;\r\n        uint256 decimals;\r\n    }\r\n\r\n\r\n    // Below functions enable you to retrieve different flavours of S-Value\r\n    // Term \"pair ID\" and \"Pair index\" both refer to the same, pair index mentioned in our data pairs list.\r\n\r\n    // Function to retrieve the data for a single data pair\r\n    function getSvalue(uint256 _pairIndex)\r\n        external \r\n        view\r\n        returns (priceFeed memory);\r\n\r\n\r\n\r\n    //Function to fetch the data for a multiple data pairs\r\n    function getSvalues(uint256[] memory _pairIndexes)\r\n        external\r\n        view\r\n        returns (priceFeed[] memory);\r\n\r\n\r\n    // Function to convert and derive new data pairs using two pair IDs and a mathematical operator multiplication(*) or division(/).\r\n    //** Curreently only available in testnets\r\n    function getDerivedSvalue(uint256 pair_id_1,uint256 pair_id_2,\r\n        uint256 operation)\r\n        external\r\n        view\r\n        returns (derivedData memory);\r\n\r\n\r\n\r\n    // Function to check  the latest Timestamp on which a data pair is updated. This will help you check the staleness of a data pair before performing an action. \r\n    function getTimestamp(uint256 _tradingPair) \r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n}"
    },
    "contracts/Oracles/SupraPUSHOracle.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\r\npragma solidity ^0.8.26;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./ISupraSValueFeed.sol\";\r\n\r\n\r\n\r\ncontract SupraPUSHOracle is Ownable {\r\n    error InvalidPair();\r\n    \r\n\r\n    ISupraSValueFeed private sValueFeed; // pointer to supra router\r\n    \r\n\r\n\r\n    address public supraValueFeedAddress = 0x700a89Ba8F908af38834B9Aba238b362CFfB665F; // router address for Mantle testnet on Supra\r\n\r\n\r\n    //GAS_USDT\r\n    mapping(uint => bool) isValidPair;\r\n    \r\n\r\n    event WhitelistPair(address indexed caller, uint[] ratePairs);\r\n    event BlackListPair(address indexed caller, uint[] ratePairs);\r\n\r\n\r\n    constructor(address _supraValueFeedAddress, uint[] memory ratePairIndexes) Ownable(msg.sender) {\r\n        supraValueFeedAddress= _supraValueFeedAddress;\r\n        whitelistSupraPair(ratePairIndexes);\r\n        sValueFeed = ISupraSValueFeed(supraValueFeedAddress);\r\n    }\r\n\r\n\r\n    function whitelistSupraPair(uint[] memory pairs) public onlyOwner {\r\n        uint256 len = pairs.length;\r\n        for (uint256 i = 0; i < len; i++) {\r\n            isValidPair[pairs[i]] = true;\r\n        }\r\n        emit WhitelistPair(msg.sender, pairs);\r\n    }\r\n\r\n    function blacklistSupraPair(uint[] memory pairs) public onlyOwner {\r\n        uint256 len = pairs.length;\r\n        for (uint256 i = 0; i < len; i++) {\r\n            isValidPair[pairs[i]] = false;\r\n        }\r\n        emit BlackListPair(msg.sender, pairs);\r\n    }\r\n\r\n\r\n    \r\n    function getPrice(uint256 _priceIndex)\r\n        public\r\n        view\r\n        returns (ISupraSValueFeed.priceFeed memory)\r\n    {\r\n        require(isValidPair[_priceIndex], InvalidPair());\r\n        return sValueFeed.getSvalue(_priceIndex);\r\n    }\r\n\r\n    function updateSupraSvalueFeed(ISupraSValueFeed _newSValueFeed) external onlyOwner {\r\n        sValueFeed = _newSValueFeed;\r\n    }\r\n\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200,
      "details": {
        "yul": true
      }
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}